
LED_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000008c4  00000958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800128  00800128  00000980  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a2  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9c  00000000  00000000  00001ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001832  00000000  00000000  00002b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  000043c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010e5d  00000000  00000000  000046d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ee  00000000  00000000  00015531  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00015d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004431  00000000  00000000  00015e2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	e0 c2       	rjmp	.+1472   	; 0x5c4 <__vector_1>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	fa c3       	rjmp	.+2036   	; 0x810 <__vector_13>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 ec       	ldi	r30, 0xC4	; 196
  48:	f8 e0       	ldi	r31, 0x08	; 8
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a8 32       	cpi	r26, 0x28	; 40
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a8 e2       	ldi	r26, 0x28	; 40
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a8 34       	cpi	r26, 0x48	; 72
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	a9 d3       	rcall	.+1874   	; 0x7ba <main>
  68:	2b c4       	rjmp	.+2134   	; 0x8c0 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Delayms>:
/******************************************/
//ms级别的延时函数
/******************************************/
void Delayms(uint lms)
{
	while(lms--)
  6c:	00 97       	sbiw	r24, 0x00	; 0
  6e:	41 f0       	breq	.+16     	; 0x80 <Delayms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	e9 ef       	ldi	r30, 0xF9	; 249
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <Delayms+0x8>
  78:	00 c0       	rjmp	.+0      	; 0x7a <Delayms+0xe>
  7a:	00 00       	nop
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	c1 f7       	brne	.-16     	; 0x70 <Delayms+0x4>
  80:	08 95       	ret

00000082 <TM1629_init>:
/*************************************************/
//6932引脚端口初始化
/*************************************************/
void TM1629_init(void)
{
	ACSR=0x80;//关闭模拟比较器
  82:	80 e8       	ldi	r24, 0x80	; 128
  84:	80 bf       	out	0x30, r24	; 48
	CLEARBIT(dis_port,dis_6932cs);//输出0
  86:	5b 98       	cbi	0x0b, 3	; 11
	SETBIT(dis_ddr,dis_6932cs);	//dis_stb 置1　设为输出
  88:	53 9a       	sbi	0x0a, 3	; 10
	CLEARBIT(dis_port,dis_clk);//输出0
  8a:	59 98       	cbi	0x0b, 1	; 11
	SETBIT(dis_ddr,dis_clk);	//dis_clk 置1　设为输出
  8c:	51 9a       	sbi	0x0a, 1	; 10
	CLEARBIT(dis_port,dis_din);//输出0
  8e:	58 98       	cbi	0x0b, 0	; 11
	SETBIT(dis_ddr,dis_din);	//dis_din 置1　设为输出
  90:	50 9a       	sbi	0x0a, 0	; 10
  92:	08 95       	ret

00000094 <dis_send>:
;调  用：
;*******************************************/
void dis_send(uchar  u)
{
	uchar	df;
	CLEARBIT(dis_port,dis_clk);
  94:	59 98       	cbi	0x0b, 1	; 11
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	30 e0       	ldi	r19, 0x00	; 0
		CLEARBIT(dis_port,dis_clk);
		NOP();
		NOP();
		NOP();

		if((u>>df)&0x01)SETBIT(dis_port,dis_din);
  9a:	90 e0       	ldi	r25, 0x00	; 0
{
	uchar	df;
	CLEARBIT(dis_port,dis_clk);
	for(df=0;df<8;df++)
	{
		CLEARBIT(dis_port,dis_clk);
  9c:	59 98       	cbi	0x0b, 1	; 11
		NOP();
  9e:	00 00       	nop
		NOP();
  a0:	00 00       	nop
		NOP();
  a2:	00 00       	nop

		if((u>>df)&0x01)SETBIT(dis_port,dis_din);
  a4:	ac 01       	movw	r20, r24
  a6:	02 2e       	mov	r0, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <dis_send+0x1a>
  aa:	55 95       	asr	r21
  ac:	47 95       	ror	r20
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <dis_send+0x16>
  b2:	40 ff       	sbrs	r20, 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <dis_send+0x26>
  b6:	58 9a       	sbi	0x0b, 0	; 11
  b8:	01 c0       	rjmp	.+2      	; 0xbc <dis_send+0x28>
		else CLEARBIT(dis_port,dis_din);
  ba:	58 98       	cbi	0x0b, 0	; 11
		NOP();
  bc:	00 00       	nop
		NOP();
  be:	00 00       	nop

		SETBIT(dis_port,dis_clk);
  c0:	59 9a       	sbi	0x0b, 1	; 11
	...
		NOP();
		NOP();
		NOP();
		NOP();
  ca:	2f 5f       	subi	r18, 0xFF	; 255
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
;*******************************************/
void dis_send(uchar  u)
{
	uchar	df;
	CLEARBIT(dis_port,dis_clk);
	for(df=0;df<8;df++)
  ce:	28 30       	cpi	r18, 0x08	; 8
  d0:	31 05       	cpc	r19, r1
  d2:	21 f7       	brne	.-56     	; 0x9c <dis_send+0x8>
		NOP();
		NOP();
		NOP();

	}
}
  d4:	08 95       	ret

000000d6 <dis_con>:
;输  出：无
;调  用：_DELAY2，_DIS_SEND
;********************************************/
void dis_con(uchar dis_con)
{
	SETBIT(dis_port,dis_6932cs);
  d6:	5b 9a       	sbi	0x0b, 3	; 11
	SETBIT(dis_port,dis_din);
  d8:	58 9a       	sbi	0x0b, 0	; 11
	SETBIT(dis_port,dis_clk);
  da:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	91 e2       	ldi	r25, 0x21	; 33
  de:	9a 95       	dec	r25
  e0:	f1 f7       	brne	.-4      	; 0xde <dis_con+0x8>
  e2:	00 00       	nop
	_delay_us(100);
	CLEARBIT(dis_port,dis_6932cs);
  e4:	5b 98       	cbi	0x0b, 3	; 11
	NOP();
  e6:	00 00       	nop
	NOP();
  e8:	00 00       	nop
	NOP();
  ea:	00 00       	nop
	dis_send(dis_con);//设置显示亮度
  ec:	d3 df       	rcall	.-90     	; 0x94 <dis_send>
	NOP();
  ee:	00 00       	nop
	NOP();
  f0:	00 00       	nop
	SETBIT(dis_port,dis_clk);
  f2:	59 9a       	sbi	0x0b, 1	; 11
	NOP();
  f4:	00 00       	nop
	NOP();
  f6:	00 00       	nop
	SETBIT(dis_port,dis_6932cs);
  f8:	5b 9a       	sbi	0x0b, 3	; 11
	NOP();
  fa:	00 00       	nop
	NOP();
  fc:	00 00       	nop
  fe:	08 95       	ret

00000100 <DIS_PARA>:
;输  入：DIS_ADD，DIS_BYT
;输  出：无
;调  用：_DIS_SEND
;******************************************** */
void DIS_PARA(uchar DISADD , uchar DISBYT)
{
 100:	cf 93       	push	r28
 102:	c6 2f       	mov	r28, r22

	SETBIT(dis_port,dis_6932cs);
 104:	5b 9a       	sbi	0x0b, 3	; 11
	NOP();
 106:	00 00       	nop
	NOP();
 108:	00 00       	nop
	NOP();
 10a:	00 00       	nop
	CLEARBIT(dis_port,dis_6932cs);
 10c:	5b 98       	cbi	0x0b, 3	; 11
	NOP();
 10e:	00 00       	nop
	NOP();
 110:	00 00       	nop
	NOP();
 112:	00 00       	nop
	dis_send(disnum[DISADD]);
 114:	e8 2f       	mov	r30, r24
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ee 5f       	subi	r30, 0xFE	; 254
 11a:	fe 4f       	sbci	r31, 0xFE	; 254
 11c:	80 81       	ld	r24, Z
 11e:	ba df       	rcall	.-140    	; 0x94 <dis_send>
	NOP();
 120:	00 00       	nop
	NOP();
 122:	00 00       	nop
	dis_send(table[DISBYT]);
 124:	ec 2f       	mov	r30, r28
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	ee 5e       	subi	r30, 0xEE	; 238
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	80 81       	ld	r24, Z
 12e:	b2 df       	rcall	.-156    	; 0x94 <dis_send>
	NOP();
 130:	00 00       	nop
	NOP();
 132:	00 00       	nop
	SETBIT(dis_port,dis_6932cs);
 134:	5b 9a       	sbi	0x0b, 3	; 11

}
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <DIS_TEST>:
;输  入：DIS_BYT
;输  出：无
;调  用：_DIS_PARA
;*********************************************/
void DIS_TEST(uchar num)
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	d8 2f       	mov	r29, r24
	uchar n=0;
	for(n=0;n<4;n++)//4位数字数码管
 140:	c0 e0       	ldi	r28, 0x00	; 0
	{
		DIS_PARA(n,num);
 142:	6d 2f       	mov	r22, r29
 144:	8c 2f       	mov	r24, r28
 146:	dc df       	rcall	.-72     	; 0x100 <DIS_PARA>
;调  用：_DIS_PARA
;*********************************************/
void DIS_TEST(uchar num)
{
	uchar n=0;
	for(n=0;n<4;n++)//4位数字数码管
 148:	cf 5f       	subi	r28, 0xFF	; 255
 14a:	c4 30       	cpi	r28, 0x04	; 4
 14c:	d1 f7       	brne	.-12     	; 0x142 <DIS_TEST+0x8>
	{
		DIS_PARA(n,num);
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <dis_f_test>:
;功  能：数码管检测
;调  用：delays(),dis_con(),DIS_TEST()
;*******************************************/
void dis_f_test(void)
{
	TM1629_init();
 154:	96 df       	rcall	.-212    	; 0x82 <TM1629_init>
	dis_con(0x9c);	//亮度设置
 156:	8c e9       	ldi	r24, 0x9C	; 156
 158:	be df       	rcall	.-132    	; 0xd6 <dis_con>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	87 ea       	ldi	r24, 0xA7	; 167
 15c:	91 e6       	ldi	r25, 0x61	; 97
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <dis_f_test+0xa>
 162:	00 c0       	rjmp	.+0      	; 0x164 <dis_f_test+0x10>
 164:	00 00       	nop
	_delay_ms(100);
	DIS_TEST(dis_full);
 166:	81 e1       	ldi	r24, 0x11	; 17
 168:	e8 df       	rcall	.-48     	; 0x13a <DIS_TEST>
 16a:	87 ea       	ldi	r24, 0xA7	; 167
 16c:	91 e6       	ldi	r25, 0x61	; 97
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <dis_f_test+0x1a>
 172:	00 c0       	rjmp	.+0      	; 0x174 <dis_f_test+0x20>
 174:	00 00       	nop
 176:	08 95       	ret

00000178 <display_some>:
输入：dis_buf[n]
输出：无
功能：显示n位数据，有消隐功能
***************************************/
void display_some(uchar dis_start,uchar dis_bit)
{
 178:	ff 92       	push	r15
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	f8 2e       	mov	r15, r24
	uchar	dis_nc=null;
	uchar	dis_n=null;
	uchar	dis_m=null;
	uchar	dis_falg=false;
	for(dis_nc=dis_bit;dis_nc>0;dis_nc--)
 184:	66 23       	and	r22, r22
 186:	71 f1       	breq	.+92     	; 0x1e4 <display_some+0x6c>
 188:	0f ef       	ldi	r16, 0xFF	; 255
 18a:	08 0f       	add	r16, r24
	{
		dis_m=dis_start+dis_nc-1;
 18c:	80 2f       	mov	r24, r16
 18e:	86 0f       	add	r24, r22
		if(null!=dis_buf[dis_m])
 190:	e8 2f       	mov	r30, r24
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	e8 5d       	subi	r30, 0xD8	; 216
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	90 81       	ld	r25, Z
 19a:	91 11       	cpse	r25, r1
 19c:	21 c0       	rjmp	.+66     	; 0x1e0 <display_some+0x68>
 19e:	d8 2f       	mov	r29, r24
 1a0:	c6 2f       	mov	r28, r22
 1a2:	1e ef       	ldi	r17, 0xFE	; 254
 1a4:	1f 0d       	add	r17, r15
 1a6:	61 0f       	add	r22, r17
 1a8:	16 2f       	mov	r17, r22
 1aa:	18 1b       	sub	r17, r24
 1ac:	13 c0       	rjmp	.+38     	; 0x1d4 <display_some+0x5c>
 1ae:	d1 0f       	add	r29, r17
 1b0:	ed 2f       	mov	r30, r29
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	e8 5d       	subi	r30, 0xD8	; 216
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	90 81       	ld	r25, Z
 1ba:	99 23       	and	r25, r25
 1bc:	59 f0       	breq	.+22     	; 0x1d4 <display_some+0x5c>
 1be:	80 2f       	mov	r24, r16
 1c0:	8c 0f       	add	r24, r28
		{
			for(dis_n=dis_nc;dis_n>0;dis_n--)
			{
				dis_m=dis_start+dis_n-1;
				DIS_PARA(dis_m,dis_buf[dis_m]);
 1c2:	e8 2f       	mov	r30, r24
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	e8 5d       	subi	r30, 0xD8	; 216
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	60 81       	ld	r22, Z
 1cc:	99 df       	rcall	.-206    	; 0x100 <DIS_PARA>
	for(dis_nc=dis_bit;dis_nc>0;dis_nc--)
	{
		dis_m=dis_start+dis_nc-1;
		if(null!=dis_buf[dis_m])
		{
			for(dis_n=dis_nc;dis_n>0;dis_n--)
 1ce:	c1 50       	subi	r28, 0x01	; 1
 1d0:	b1 f7       	brne	.-20     	; 0x1be <display_some+0x46>
 1d2:	0f c0       	rjmp	.+30     	; 0x1f2 <display_some+0x7a>
				DIS_PARA(dis_m,dis_buf[dis_m]);
				dis_falg=true;
			}
			break;
		}
		else 	DIS_PARA(dis_m,dis_null);
 1d4:	60 e1       	ldi	r22, 0x10	; 16
 1d6:	8d 2f       	mov	r24, r29
 1d8:	93 df       	rcall	.-218    	; 0x100 <DIS_PARA>
{
	uchar	dis_nc=null;
	uchar	dis_n=null;
	uchar	dis_m=null;
	uchar	dis_falg=false;
	for(dis_nc=dis_bit;dis_nc>0;dis_nc--)
 1da:	c1 50       	subi	r28, 0x01	; 1
 1dc:	41 f7       	brne	.-48     	; 0x1ae <display_some+0x36>
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <display_some+0x6c>
 1e0:	c6 2f       	mov	r28, r22
 1e2:	ed cf       	rjmp	.-38     	; 0x1be <display_some+0x46>
		}
		else 	DIS_PARA(dis_m,dis_null);
	}
	if(false==dis_falg)//----------------------------------
	{
		DIS_PARA(dis_start,dis_buf[dis_start]);
 1e4:	ef 2d       	mov	r30, r15
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	e8 5d       	subi	r30, 0xD8	; 216
 1ea:	fe 4f       	sbci	r31, 0xFE	; 254
 1ec:	60 81       	ld	r22, Z
 1ee:	8f 2d       	mov	r24, r15
 1f0:	87 df       	rcall	.-242    	; 0x100 <DIS_PARA>
	}
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	08 95       	ret

000001fe <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 1fe:	08 95       	ret

00000200 <key_init>:

************************************************************************/

void key_init(void)
{
	SETBIT(KEY_port,KEYPIN1);//1
 200:	5d 9a       	sbi	0x0b, 5	; 11
	CLEARBIT(KEY_ddrd,KEYPIN1);	// 置0　设为输入
 202:	55 98       	cbi	0x0a, 5	; 10

	SETBIT(KEY_port,KEYPIN2);//1
 204:	5e 9a       	sbi	0x0b, 6	; 11
	//CLEARBIT(KEY_port,KEYPIN2);//0
	CLEARBIT(KEY_ddrd,KEYPIN2);	//置0　设为输入
 206:	56 98       	cbi	0x0a, 6	; 10
	SETBIT(KEY_port,KEYPIN3);//1
 208:	5f 9a       	sbi	0x0b, 7	; 11
	CLEARBIT(KEY_ddrd,KEYPIN3);	//置0　设为输入
 20a:	57 98       	cbi	0x0a, 7	; 10
 20c:	08 95       	ret

0000020e <GetKeyCode>:
获取按键号　
*********************************************************************/

unsigned char GetKeyCode(void)
{
	if(Key3)
 20e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Key3>
 212:	88 23       	and	r24, r24
 214:	21 f0       	breq	.+8      	; 0x21e <GetKeyCode+0x10>
	{
    if(0==CHECKBIT(KEY_dat,KEYPIN1)) return KEY_1;
 216:	4d 9b       	sbis	0x09, 5	; 9
 218:	06 c0       	rjmp	.+12     	; 0x226 <GetKeyCode+0x18>
    if(0==CHECKBIT(KEY_dat,KEYPIN2)) return KEY_2;
 21a:	4e 9b       	sbis	0x09, 6	; 9
 21c:	06 c0       	rjmp	.+12     	; 0x22a <GetKeyCode+0x1c>
	}
	//if(1==CHECKBIT(KEY_dat,KEYPIN2)) return KEY_2;
    if(0==CHECKBIT(KEY_dat,KEYPIN3)) return KEY_3;	
 21e:	4f 9b       	sbis	0x09, 7	; 9
 220:	06 c0       	rjmp	.+12     	; 0x22e <GetKeyCode+0x20>
    return NO_KEY;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret

unsigned char GetKeyCode(void)
{
	if(Key3)
	{
    if(0==CHECKBIT(KEY_dat,KEYPIN1)) return KEY_1;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	08 95       	ret
    if(0==CHECKBIT(KEY_dat,KEYPIN2)) return KEY_2;
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	08 95       	ret
	}
	//if(1==CHECKBIT(KEY_dat,KEYPIN2)) return KEY_2;
    if(0==CHECKBIT(KEY_dat,KEYPIN3)) return KEY_3;	
 22e:	83 e0       	ldi	r24, 0x03	; 3
    return NO_KEY;
	
}
 230:	08 95       	ret

00000232 <GetKey>:
    static unsigned int KeyHoldDly = 0;        //按键连发时间
    
    unsigned char KeyPress  = NO_KEY;           //按键值
    unsigned char KeyReturn = NO_KEY;           //按键返回值

    KeyPress = GetKeyCode();					//获取按键值
 232:	ed df       	rcall	.-38     	; 0x20e <GetKeyCode>
    switch(KeyState)
 234:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <KeyState.1571>
 238:	92 30       	cpi	r25, 0x02	; 2
 23a:	51 f1       	breq	.+84     	; 0x290 <GetKey+0x5e>
 23c:	28 f4       	brcc	.+10     	; 0x248 <GetKey+0x16>
 23e:	99 23       	and	r25, r25
 240:	51 f0       	breq	.+20     	; 0x256 <GetKey+0x24>
 242:	91 30       	cpi	r25, 0x01	; 1
 244:	91 f0       	breq	.+36     	; 0x26a <GetKey+0x38>
 246:	63 c0       	rjmp	.+198    	; 0x30e <GetKey+0xdc>
 248:	93 30       	cpi	r25, 0x03	; 3
 24a:	09 f4       	brne	.+2      	; 0x24e <GetKey+0x1c>
 24c:	48 c0       	rjmp	.+144    	; 0x2de <GetKey+0xac>
 24e:	94 30       	cpi	r25, 0x04	; 4
 250:	09 f4       	brne	.+2      	; 0x254 <GetKey+0x22>
 252:	4c c0       	rjmp	.+152    	; 0x2ec <GetKey+0xba>
 254:	5c c0       	rjmp	.+184    	; 0x30e <GetKey+0xdc>
    {        
        case 0:  						//按键初始态00   
            if( KeyPress !=NO_KEY ) 	//有键按下
 256:	88 23       	and	r24, r24
 258:	09 f4       	brne	.+2      	; 0x25c <GetKey+0x2a>
 25a:	5d c0       	rjmp	.+186    	; 0x316 <GetKey+0xe4>
            {
                KeyState = 1;			//转入下一个状态，按键确认
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <KeyState.1571>
                KeyPrev  = KeyPress;	//保存键值　
 262:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <KeyPrev.1572>
    static unsigned char KeyState   = 0;        //按键状态,状态机使用.         ？？？？？？？？？？？？？？？？？？？
    static unsigned char KeyPrev    = 0;        //保存上一次按键,防止出现乱码现象.
    static unsigned int KeyHoldDly = 0;        //按键连发时间
    
    unsigned char KeyPress  = NO_KEY;           //按键值
    unsigned char KeyReturn = NO_KEY;           //按键返回值
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret
                KeyState = 1;			//转入下一个状态，按键确认
                KeyPrev  = KeyPress;	//保存键值　
			}
			break;      
        case 1:							//按键确认态01
            if( KeyPress !=NO_KEY  ) 
 26a:	88 23       	and	r24, r24
 26c:	69 f0       	breq	.+26     	; 0x288 <GetKey+0x56>
            {                
                if(KeyPrev  != KeyPress)//与上次按键不同,是乱码
 26e:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <KeyPrev.1572>
 272:	98 17       	cp	r25, r24
 274:	21 f0       	breq	.+8      	; 0x27e <GetKey+0x4c>
                {
                    KeyState  = 0;
 276:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <KeyState.1571>
    static unsigned char KeyState   = 0;        //按键状态,状态机使用.         ？？？？？？？？？？？？？？？？？？？
    static unsigned char KeyPrev    = 0;        //保存上一次按键,防止出现乱码现象.
    static unsigned int KeyHoldDly = 0;        //按键连发时间
    
    unsigned char KeyPress  = NO_KEY;           //按键值
    unsigned char KeyReturn = NO_KEY;           //按键返回值
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
                    KeyState  = 0;
                }
                else
                {
                     //以下为按键按下处理
                    KeyState  = 2;							//确认按键按下，转入按键长短按判断
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <KeyState.1571>
    static unsigned char KeyState   = 0;        //按键状态,状态机使用.         ？？？？？？？？？？？？？？？？？？？
    static unsigned char KeyPrev    = 0;        //保存上一次按键,防止出现乱码现象.
    static unsigned int KeyHoldDly = 0;        //按键连发时间
    
    unsigned char KeyPress  = NO_KEY;           //按键值
    unsigned char KeyReturn = NO_KEY;           //按键返回值
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	08 95       	ret
                    
                }
            }
            else	//按键抬起,是抖动,不响应按键
            {
				KeyState = 0;
 288:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <KeyState.1571>
    static unsigned char KeyState   = 0;        //按键状态,状态机使用.         ？？？？？？？？？？？？？？？？？？？
    static unsigned char KeyPrev    = 0;        //保存上一次按键,防止出现乱码现象.
    static unsigned int KeyHoldDly = 0;        //按键连发时间
    
    unsigned char KeyPress  = NO_KEY;           //按键值
    unsigned char KeyReturn = NO_KEY;           //按键返回值
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	08 95       	ret
				KeyState = 0;
            }

            break;
        case 2:                         //按键连续态11    
            if( KeyPress !=NO_KEY )
 290:	88 23       	and	r24, r24
 292:	d1 f0       	breq	.+52     	; 0x2c8 <GetKey+0x96>
            {
				KeyHoldDly++;
 294:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <KeyHoldDly.1573>
 298:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <KeyHoldDly.1573+0x1>
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <KeyHoldDly.1573+0x1>
 2a2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <KeyHoldDly.1573>
				KeyState=2;
 2a6:	22 e0       	ldi	r18, 0x02	; 2
 2a8:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <KeyState.1571>
				if(KeyHoldDly>KEY_BURST_FIRST)				//长按状态判断
 2ac:	89 38       	cpi	r24, 0x89	; 137
 2ae:	93 41       	sbci	r25, 0x13	; 19
 2b0:	a0 f1       	brcs	.+104    	; 0x31a <GetKey+0xe8>
				{
                    KeyHoldDly = 0;
 2b2:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <KeyHoldDly.1573+0x1>
 2b6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <KeyHoldDly.1573>
                    KeyReturn  = KEY_HOLD | KeyPrev;       //返回长按后的值
 2ba:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <KeyPrev.1572>
 2be:	80 6b       	ori	r24, 0xB0	; 176
                    KeyState=3;
 2c0:	93 e0       	ldi	r25, 0x03	; 3
 2c2:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <KeyState.1571>
					break;
 2c6:	08 95       	ret
				//	KeyState=3;   
       			//}
            } 
			else
			{
				KeyHoldDly = 0;
 2c8:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <KeyHoldDly.1573+0x1>
 2cc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <KeyHoldDly.1573>
				KeyReturn = KEY_DOWN | KeyPrev;        //返回按键按下键值
 2d0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <KeyPrev.1572>
 2d4:	80 6a       	ori	r24, 0xA0	; 160
				KeyState=3;
 2d6:	93 e0       	ldi	r25, 0x03	; 3
 2d8:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <KeyState.1571>
 2dc:	08 95       	ret
			}
			
       		break;
	    case 3:  //按键释放态10
            if(KeyPress == NO_KEY )KeyState=4; 
 2de:	81 11       	cpse	r24, r1
 2e0:	1e c0       	rjmp	.+60     	; 0x31e <GetKey+0xec>
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <KeyState.1571>
    static unsigned char KeyState   = 0;        //按键状态,状态机使用.         ？？？？？？？？？？？？？？？？？？？
    static unsigned char KeyPrev    = 0;        //保存上一次按键,防止出现乱码现象.
    static unsigned int KeyHoldDly = 0;        //按键连发时间
    
    unsigned char KeyPress  = NO_KEY;           //按键值
    unsigned char KeyReturn = NO_KEY;           //按键返回值
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret
       		break;
	    case 3:  //按键释放态10
            if(KeyPress == NO_KEY )KeyState=4; 
			break;
	    case 4:  //按键释放态10
            if(KeyPress == NO_KEY ) 
 2ec:	81 11       	cpse	r24, r1
 2ee:	0a c0       	rjmp	.+20     	; 0x304 <GetKey+0xd2>
            {
                KeyState   = 0;
 2f0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <KeyState.1571>
                KeyHoldDly = 0;
 2f4:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <KeyHoldDly.1573+0x1>
 2f8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <KeyHoldDly.1573>
                KeyReturn  = KEY_UP | KeyPrev;              //返回按键抬起值
 2fc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <KeyPrev.1572>
 300:	80 6d       	ori	r24, 0xD0	; 208
 302:	08 95       	ret
            }
            else	KeyState=3;             
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <KeyState.1571>
    static unsigned char KeyState   = 0;        //按键状态,状态机使用.         ？？？？？？？？？？？？？？？？？？？
    static unsigned char KeyPrev    = 0;        //保存上一次按键,防止出现乱码现象.
    static unsigned int KeyHoldDly = 0;        //按键连发时间
    
    unsigned char KeyPress  = NO_KEY;           //按键值
    unsigned char KeyReturn = NO_KEY;           //按键返回值
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret
                KeyReturn  = KEY_UP | KeyPrev;              //返回按键抬起值
            }
            else	KeyState=3;             
            break;
		 default :
        	KeyState = 0;
 30e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <KeyState.1571>
        	KeyReturn = NO_KEY;
 312:	80 e0       	ldi	r24, 0x00	; 0
        	break;
 314:	08 95       	ret
    static unsigned char KeyState   = 0;        //按键状态,状态机使用.         ？？？？？？？？？？？？？？？？？？？
    static unsigned char KeyPrev    = 0;        //保存上一次按键,防止出现乱码现象.
    static unsigned int KeyHoldDly = 0;        //按键连发时间
    
    unsigned char KeyPress  = NO_KEY;           //按键值
    unsigned char KeyReturn = NO_KEY;           //按键返回值
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	08 95       	ret
 31e:	80 e0       	ldi	r24, 0x00	; 0
        	KeyState = 0;
        	KeyReturn = NO_KEY;
        	break;
    }    
    return KeyReturn;
}
 320:	08 95       	ret

00000322 <Key_detect>:
//按键检测
/*******************************************************************/
void Key_detect(void)
{	 
	unsigned char  keytemp;
	KeyValue=0;
 322:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <KeyValue>
	keytemp=GetKey();
 326:	85 df       	rcall	.-246    	; 0x232 <GetKey>
/**/
	if(true==Keypermit_deal)									//允许按键处理
 328:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <Keypermit_deal>
 32c:	91 30       	cpi	r25, 0x01	; 1
 32e:	79 f5       	brne	.+94     	; 0x38e <Key_detect+0x6c>
	{											
		if(null!=keytemp)
 330:	88 23       	and	r24, r24
 332:	09 f4       	brne	.+2      	; 0x336 <Key_detect+0x14>
 334:	4b c0       	rjmp	.+150    	; 0x3cc <Key_detect+0xaa>
		{
			Keypermit_deal=false;						//在按键松开前不允许第二次处理			
 336:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Keypermit_deal>
			switch(keytemp)  
 33a:	83 3a       	cpi	r24, 0xA3	; 163
 33c:	a9 f0       	breq	.+42     	; 0x368 <Key_detect+0x46>
 33e:	28 f4       	brcc	.+10     	; 0x34a <Key_detect+0x28>
 340:	81 3a       	cpi	r24, 0xA1	; 161
 342:	51 f0       	breq	.+20     	; 0x358 <Key_detect+0x36>
 344:	82 3a       	cpi	r24, 0xA2	; 162
 346:	61 f0       	breq	.+24     	; 0x360 <Key_detect+0x3e>
 348:	1f c0       	rjmp	.+62     	; 0x388 <Key_detect+0x66>
 34a:	82 3b       	cpi	r24, 0xB2	; 178
 34c:	a9 f0       	breq	.+42     	; 0x378 <Key_detect+0x56>
 34e:	83 3b       	cpi	r24, 0xB3	; 179
 350:	b9 f0       	breq	.+46     	; 0x380 <Key_detect+0x5e>
 352:	81 3b       	cpi	r24, 0xB1	; 177
 354:	c9 f4       	brne	.+50     	; 0x388 <Key_detect+0x66>
 356:	0c c0       	rjmp	.+24     	; 0x370 <Key_detect+0x4e>
			{
			
				case KEY_DOWN|KEY_1:  	KeyValue=KEY_1_short; 	break;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <KeyValue>
 35e:	08 95       	ret
				case KEY_DOWN|KEY_2:  	KeyValue=KEY_2_short; 	break;
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <KeyValue>
 366:	08 95       	ret
				case KEY_DOWN|KEY_3:  	KeyValue=KEY_3_short; 	break;
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <KeyValue>
 36e:	08 95       	ret
				case KEY_HOLD|KEY_1:  	KeyValue=KEY_1_HOLD;	break;
 370:	84 e0       	ldi	r24, 0x04	; 4
 372:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <KeyValue>
 376:	08 95       	ret
				case KEY_HOLD|KEY_2:  	KeyValue=KEY_2_HOLD; 	break;
 378:	85 e0       	ldi	r24, 0x05	; 5
 37a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <KeyValue>
 37e:	08 95       	ret
				case KEY_HOLD|KEY_3:  	KeyValue=KEY_3_HOLD; 	break;
 380:	86 e0       	ldi	r24, 0x06	; 6
 382:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <KeyValue>
 386:	08 95       	ret
				default :KeyValue=0; break;
 388:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <KeyValue>
 38c:	08 95       	ret
			} 
		}
	}
	else
	{
		if(null!=keytemp)
 38e:	88 23       	and	r24, r24
 390:	e9 f0       	breq	.+58     	; 0x3cc <Key_detect+0xaa>
		{
			switch(keytemp)  
 392:	82 3d       	cpi	r24, 0xD2	; 210
 394:	59 f0       	breq	.+22     	; 0x3ac <Key_detect+0x8a>
 396:	83 3d       	cpi	r24, 0xD3	; 211
 398:	81 f0       	breq	.+32     	; 0x3ba <Key_detect+0x98>
 39a:	81 3d       	cpi	r24, 0xD1	; 209
 39c:	a9 f4       	brne	.+42     	; 0x3c8 <Key_detect+0xa6>
			{
				case KEY_UP|KEY_1:  	KeyValue=KEY_1_UP;Keypermit_deal=true; 	break;//允许下一次按键处理
 39e:	87 e0       	ldi	r24, 0x07	; 7
 3a0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <KeyValue>
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Keypermit_deal>
 3aa:	08 95       	ret
				case KEY_UP|KEY_2:  	KeyValue=KEY_2_UP;Keypermit_deal=true; 	break;//允许下一次按键处理
 3ac:	88 e0       	ldi	r24, 0x08	; 8
 3ae:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <KeyValue>
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Keypermit_deal>
 3b8:	08 95       	ret
				case KEY_UP|KEY_3:  	KeyValue=KEY_3_UP;Keypermit_deal=true; 	break;//允许下一次按键处理	 															
 3ba:	89 e0       	ldi	r24, 0x09	; 9
 3bc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <KeyValue>
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Keypermit_deal>
 3c6:	08 95       	ret
				default :KeyValue=0; break;
 3c8:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <KeyValue>
 3cc:	08 95       	ret

000003ce <KEY_1_short_isr>:
	KeyValue=null;	
}

void KEY_1_short_isr(void)
{
		fatigue_number=0;
 3ce:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <fatigue_number+0x1>
 3d2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <fatigue_number>

		dis_buf[dis_bit00]=fatigue_number%10;
 3d6:	e8 e2       	ldi	r30, 0x28	; 40
 3d8:	f1 e0       	ldi	r31, 0x01	; 1
 3da:	10 82       	st	Z, r1
		dis_buf[dis_bit01]=(fatigue_number/10)%10;
 3dc:	11 82       	std	Z+1, r1	; 0x01
		dis_buf[dis_bit02]=(fatigue_number/100)%10;
 3de:	12 82       	std	Z+2, r1	; 0x02
		dis_buf[dis_bit03]=(fatigue_number/1000)%10;
 3e0:	13 82       	std	Z+3, r1	; 0x03
		
		display_some(0,4);
 3e2:	64 e0       	ldi	r22, 0x04	; 4
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	c8 ce       	rjmp	.-624    	; 0x178 <display_some>
 3e8:	08 95       	ret

000003ea <KEY_2_short_isr>:
}

void KEY_2_short_isr(void)
{
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29

		if(fatigue_number>=9999)//如果疲劳次数已到，按暂停键清零，
 3ee:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <fatigue_number>
 3f2:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <fatigue_number+0x1>
 3f6:	8f 30       	cpi	r24, 0x0F	; 15
 3f8:	27 e2       	ldi	r18, 0x27	; 39
 3fa:	92 07       	cpc	r25, r18
 3fc:	28 f0       	brcs	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		{
			fatigue_number=0;//疲劳次数计数清零
 3fe:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <fatigue_number+0x1>
 402:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <fatigue_number>
 406:	05 c0       	rjmp	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		}
		else
		{
			fatigue_number+=1;//step+1
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <fatigue_number+0x1>
 40e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <fatigue_number>
		}
		
		dis_buf[dis_bit00]=fatigue_number%10;
 412:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <fatigue_number>
 416:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <fatigue_number+0x1>
 41a:	e8 e2       	ldi	r30, 0x28	; 40
 41c:	f1 e0       	ldi	r31, 0x01	; 1
 41e:	9a 01       	movw	r18, r20
 420:	ad ec       	ldi	r26, 0xCD	; 205
 422:	bc ec       	ldi	r27, 0xCC	; 204
 424:	41 d2       	rcall	.+1154   	; 0x8a8 <__umulhisi3>
 426:	ec 01       	movw	r28, r24
 428:	d6 95       	lsr	r29
 42a:	c7 95       	ror	r28
 42c:	d6 95       	lsr	r29
 42e:	c7 95       	ror	r28
 430:	d6 95       	lsr	r29
 432:	c7 95       	ror	r28
 434:	9e 01       	movw	r18, r28
 436:	22 0f       	add	r18, r18
 438:	33 1f       	adc	r19, r19
 43a:	ce 01       	movw	r24, r28
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	82 0f       	add	r24, r18
 44a:	93 1f       	adc	r25, r19
 44c:	9a 01       	movw	r18, r20
 44e:	28 1b       	sub	r18, r24
 450:	39 0b       	sbc	r19, r25
 452:	20 83       	st	Z, r18
		dis_buf[dis_bit01]=(fatigue_number/10)%10;
 454:	9e 01       	movw	r18, r28
 456:	28 d2       	rcall	.+1104   	; 0x8a8 <__umulhisi3>
 458:	96 95       	lsr	r25
 45a:	87 95       	ror	r24
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	96 95       	lsr	r25
 462:	87 95       	ror	r24
 464:	9c 01       	movw	r18, r24
 466:	22 0f       	add	r18, r18
 468:	33 1f       	adc	r19, r19
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	82 0f       	add	r24, r18
 478:	93 1f       	adc	r25, r19
 47a:	c8 1b       	sub	r28, r24
 47c:	d9 0b       	sbc	r29, r25
 47e:	c1 83       	std	Z+1, r28	; 0x01
		dis_buf[dis_bit02]=(fatigue_number/100)%10;
 480:	9a 01       	movw	r18, r20
 482:	36 95       	lsr	r19
 484:	27 95       	ror	r18
 486:	36 95       	lsr	r19
 488:	27 95       	ror	r18
 48a:	ab e7       	ldi	r26, 0x7B	; 123
 48c:	b4 e1       	ldi	r27, 0x14	; 20
 48e:	0c d2       	rcall	.+1048   	; 0x8a8 <__umulhisi3>
 490:	ec 01       	movw	r28, r24
 492:	d6 95       	lsr	r29
 494:	c7 95       	ror	r28
 496:	9e 01       	movw	r18, r28
 498:	ad ec       	ldi	r26, 0xCD	; 205
 49a:	bc ec       	ldi	r27, 0xCC	; 204
 49c:	05 d2       	rcall	.+1034   	; 0x8a8 <__umulhisi3>
 49e:	bc 01       	movw	r22, r24
 4a0:	76 95       	lsr	r23
 4a2:	67 95       	ror	r22
 4a4:	76 95       	lsr	r23
 4a6:	67 95       	ror	r22
 4a8:	76 95       	lsr	r23
 4aa:	67 95       	ror	r22
 4ac:	cb 01       	movw	r24, r22
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	68 0f       	add	r22, r24
 4c0:	79 1f       	adc	r23, r25
 4c2:	c6 1b       	sub	r28, r22
 4c4:	d7 0b       	sbc	r29, r23
 4c6:	c2 83       	std	Z+2, r28	; 0x02
		dis_buf[dis_bit03]=(fatigue_number/1000)%10;
 4c8:	9a 01       	movw	r18, r20
 4ca:	36 95       	lsr	r19
 4cc:	27 95       	ror	r18
 4ce:	36 95       	lsr	r19
 4d0:	27 95       	ror	r18
 4d2:	36 95       	lsr	r19
 4d4:	27 95       	ror	r18
 4d6:	a5 ec       	ldi	r26, 0xC5	; 197
 4d8:	b0 e2       	ldi	r27, 0x20	; 32
 4da:	e6 d1       	rcall	.+972    	; 0x8a8 <__umulhisi3>
 4dc:	ec 01       	movw	r28, r24
 4de:	d2 95       	swap	r29
 4e0:	c2 95       	swap	r28
 4e2:	cf 70       	andi	r28, 0x0F	; 15
 4e4:	cd 27       	eor	r28, r29
 4e6:	df 70       	andi	r29, 0x0F	; 15
 4e8:	cd 27       	eor	r28, r29
 4ea:	9e 01       	movw	r18, r28
 4ec:	ad ec       	ldi	r26, 0xCD	; 205
 4ee:	bc ec       	ldi	r27, 0xCC	; 204
 4f0:	db d1       	rcall	.+950    	; 0x8a8 <__umulhisi3>
 4f2:	ac 01       	movw	r20, r24
 4f4:	56 95       	lsr	r21
 4f6:	47 95       	ror	r20
 4f8:	56 95       	lsr	r21
 4fa:	47 95       	ror	r20
 4fc:	56 95       	lsr	r21
 4fe:	47 95       	ror	r20
 500:	ca 01       	movw	r24, r20
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	44 0f       	add	r20, r20
 508:	55 1f       	adc	r21, r21
 50a:	44 0f       	add	r20, r20
 50c:	55 1f       	adc	r21, r21
 50e:	44 0f       	add	r20, r20
 510:	55 1f       	adc	r21, r21
 512:	48 0f       	add	r20, r24
 514:	59 1f       	adc	r21, r25
 516:	c4 1b       	sub	r28, r20
 518:	d5 0b       	sbc	r29, r21
 51a:	c3 83       	std	Z+3, r28	; 0x03
		
		display_some(0,4);
 51c:	64 e0       	ldi	r22, 0x04	; 4
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	2b de       	rcall	.-938    	; 0x178 <display_some>
	
}
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	08 95       	ret

00000528 <KEY_3_short_isr>:

void KEY_3_short_isr(void)
{
	Key3=!Key3;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Key3>
 52e:	91 11       	cpse	r25, r1
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Key3>
	if (Key3==false)
 536:	81 11       	cpse	r24, r1
 538:	02 c0       	rjmp	.+4      	; 0x53e <KEY_3_short_isr+0x16>
	{
		timer1_init();
 53a:	2f d1       	rcall	.+606    	; 0x79a <timer1_init>
 53c:	01 c0       	rjmp	.+2      	; 0x540 <KEY_3_short_isr+0x18>
	}
	else
	{
		timer1_close();
 53e:	59 d1       	rcall	.+690    	; 0x7f2 <timer1_close>
	}
	display_some(0,4);
 540:	64 e0       	ldi	r22, 0x04	; 4
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	19 ce       	rjmp	.-974    	; 0x178 <display_some>
 546:	08 95       	ret

00000548 <Key_ISR>:
/******************************************************************/
//按键检测
/*******************************************************************/
void Key_ISR(void)
{
	switch(KeyValue)
 548:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <KeyValue>
 54c:	83 30       	cpi	r24, 0x03	; 3
 54e:	79 f0       	breq	.+30     	; 0x56e <Key_ISR+0x26>
 550:	18 f4       	brcc	.+6      	; 0x558 <Key_ISR+0x10>
 552:	82 30       	cpi	r24, 0x02	; 2
 554:	31 f0       	breq	.+12     	; 0x562 <Key_ISR+0x1a>
 556:	17 c0       	rjmp	.+46     	; 0x586 <Key_ISR+0x3e>
 558:	84 30       	cpi	r24, 0x04	; 4
 55a:	59 f0       	breq	.+22     	; 0x572 <Key_ISR+0x2a>
 55c:	85 30       	cpi	r24, 0x05	; 5
 55e:	79 f0       	breq	.+30     	; 0x57e <Key_ISR+0x36>
 560:	12 c0       	rjmp	.+36     	; 0x586 <Key_ISR+0x3e>
		//if (Key3)
		//{
		//	KEY_1_short_isr();
		//}break;
		case KEY_2_short:
		if (Key3)
 562:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Key3>
 566:	88 23       	and	r24, r24
 568:	71 f0       	breq	.+28     	; 0x586 <Key_ISR+0x3e>
		{
			KEY_2_short_isr();
 56a:	3f df       	rcall	.-386    	; 0x3ea <KEY_2_short_isr>
 56c:	0c c0       	rjmp	.+24     	; 0x586 <Key_ISR+0x3e>
		}break;
		case KEY_3_short:	KEY_3_short_isr();
 56e:	dc df       	rcall	.-72     	; 0x528 <KEY_3_short_isr>
		break;
 570:	0a c0       	rjmp	.+20     	; 0x586 <Key_ISR+0x3e>
		case KEY_1_HOLD :	if (Key3)
 572:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Key3>
 576:	88 23       	and	r24, r24
 578:	31 f0       	breq	.+12     	; 0x586 <Key_ISR+0x3e>
		{
			KEY_1_short_isr();
 57a:	29 df       	rcall	.-430    	; 0x3ce <KEY_1_short_isr>
 57c:	04 c0       	rjmp	.+8      	; 0x586 <Key_ISR+0x3e>
		}break;
		case KEY_2_HOLD :	if (Key3)
 57e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Key3>
 582:	81 11       	cpse	r24, r1
		{
			KEY_2_short_isr();
 584:	32 df       	rcall	.-412    	; 0x3ea <KEY_2_short_isr>
		}break;
		//case KEY_3_HOLD :	KEY_3_HOLD_isr();
		//break;
		default:	KeyValue=null;break;
	}
	KeyValue=null;	
 586:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <KeyValue>
 58a:	08 95       	ret

0000058c <port_init>:
	/* Insert application code here, after the board has been initialized. */
}

void port_init(void)
{
	SETBIT(PINB_ddrd,E_delay2);	// 置1　设为输出
 58c:	27 9a       	sbi	0x04, 7	; 4
	SETBIT(PINB_ddrd,E_delay3);// 置1　设为输出
 58e:	26 9a       	sbi	0x04, 6	; 4
	SETBIT(PINB_ddrd,buzzer_pin);		// 置1　设为输出
 590:	22 9a       	sbi	0x04, 2	; 4
	
	CLEARBIT(PINB_port,E_delay2);//置0  设为输出0
 592:	2f 98       	cbi	0x05, 7	; 5
	CLEARBIT(PINB_port,E_delay3);//置0  设为输出0
 594:	2e 98       	cbi	0x05, 6	; 5
	CLEARBIT(PINB_port,buzzer_pin);//置0  设为输出0
 596:	2a 98       	cbi	0x05, 2	; 5
	
	SETBIT(PINB_port,buzzer_pin);//置0  设为输出0           //debug----------------------------------
 598:	2a 9a       	sbi	0x05, 2	; 5
	Delayms(100);//debug----------------------------------
 59a:	84 e6       	ldi	r24, 0x64	; 100
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	66 dd       	rcall	.-1332   	; 0x6c <Delayms>
	CLEARBIT(PINB_port,buzzer_pin);//置0  设为输出0   //debug----------------------------------
 5a0:	2a 98       	cbi	0x05, 2	; 5
	
	
	ACSR  = 0x80;//关闭模拟比较器
 5a2:	80 e8       	ldi	r24, 0x80	; 128
 5a4:	80 bf       	out	0x30, r24	; 48
	ADCSRA= 0x00;//ADC控制
 5a6:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	
	EICRA=0x02;//INT0下降沿中断
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__EEPROM_REGION_LENGTH__+0x7f0069>
	EIMSK|=(1<<INT0);
 5b0:	e8 9a       	sbi	0x1d, 0	; 29
 5b2:	08 95       	ret

000005b4 <EEPROM_write>:



void EEPROM_write(uint uiAddress, uchar ucData)//写EEROM
{
	while(EECR & (1<<EEPE));/* 等待上一次写操作结束 */
 5b4:	f9 99       	sbic	0x1f, 1	; 31
 5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <EEPROM_write>
	EEAR = uiAddress;/* 设置地址和数据寄存器*/
 5b8:	92 bd       	out	0x22, r25	; 34
 5ba:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
 5bc:	60 bd       	out	0x20, r22	; 32
	EECR |= (1<<EEMPE);/* 置位EEMWE */
 5be:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);/* 置位EEWE 以启动写操作*/
 5c0:	f9 9a       	sbi	0x1f, 1	; 31
 5c2:	08 95       	ret

000005c4 <__vector_1>:
	EICRA=0x02;//INT0下降沿中断
	EIMSK|=(1<<INT0);
}

ISR(INT0_vect)//外部中断0
{
 5c4:	1f 92       	push	r1
 5c6:	0f 92       	push	r0
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	0f 92       	push	r0
 5cc:	11 24       	eor	r1, r1
 5ce:	2f 93       	push	r18
 5d0:	3f 93       	push	r19
 5d2:	4f 93       	push	r20
 5d4:	5f 93       	push	r21
 5d6:	6f 93       	push	r22
 5d8:	7f 93       	push	r23
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	af 93       	push	r26
 5e0:	bf 93       	push	r27
 5e2:	ef 93       	push	r30
 5e4:	ff 93       	push	r31
	cli();//关中断，防止多次进入该中断
 5e6:	f8 94       	cli
	CLEARBIT(EIFR,INTF0);//清外部中断0标记
 5e8:	e0 98       	cbi	0x1c, 0	; 28
	//if(int1_flag==false)
	//{	
	//	int1_flag=true;
		
		if(fatigue_number>=9999)
 5ea:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <fatigue_number>
 5ee:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <fatigue_number+0x1>
 5f2:	8f 30       	cpi	r24, 0x0F	; 15
 5f4:	97 42       	sbci	r25, 0x27	; 39
 5f6:	20 f0       	brcs	.+8      	; 0x600 <__vector_1+0x3c>
		{
			fatigue_number=0;
 5f8:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <fatigue_number+0x1>
 5fc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <fatigue_number>
		}
		EEPROM_write(0x0050,fatigue_number&0xff);
 600:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <fatigue_number>
 604:	80 e5       	ldi	r24, 0x50	; 80
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	d5 df       	rcall	.-86     	; 0x5b4 <EEPROM_write>
		EEPROM_write(0x0051,(fatigue_number>>8)&0xff);
 60a:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <fatigue_number+0x1>
 60e:	81 e5       	ldi	r24, 0x51	; 81
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	d0 df       	rcall	.-96     	; 0x5b4 <EEPROM_write>
		
		//EEPROM_write(0x0050,5&0xff);
		//EEPROM_write(0x0051,(0>>8)&0xff);
		
	//}
	NOP();
 614:	00 00       	nop
}
 616:	ff 91       	pop	r31
 618:	ef 91       	pop	r30
 61a:	bf 91       	pop	r27
 61c:	af 91       	pop	r26
 61e:	9f 91       	pop	r25
 620:	8f 91       	pop	r24
 622:	7f 91       	pop	r23
 624:	6f 91       	pop	r22
 626:	5f 91       	pop	r21
 628:	4f 91       	pop	r20
 62a:	3f 91       	pop	r19
 62c:	2f 91       	pop	r18
 62e:	0f 90       	pop	r0
 630:	0f be       	out	0x3f, r0	; 63
 632:	0f 90       	pop	r0
 634:	1f 90       	pop	r1
 636:	18 95       	reti

00000638 <EEPROM_read>:
	EECR |= (1<<EEMPE);/* 置位EEMWE */
	EECR |= (1<<EEPE);/* 置位EEWE 以启动写操作*/
}
uchar EEPROM_read(uint uiAddress)//读EEROM
{
	while(EECR & (1<<EEPE)); /* 等待上一次写操作结束 */
 638:	f9 99       	sbic	0x1f, 1	; 31
 63a:	fe cf       	rjmp	.-4      	; 0x638 <EEPROM_read>
	EEAR = uiAddress;/* 设置地址寄存器*/
 63c:	92 bd       	out	0x22, r25	; 34
 63e:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE);/* 设置EERE 以启动读操作*/
 640:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;/* 自数据寄存器返回数据 */
 642:	80 b5       	in	r24, 0x20	; 32
}
 644:	08 95       	ret

00000646 <state_init>:
	//}
	NOP();
}

void state_init(void)
{
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
	//EEPROM_write(0x0050,5&0xff);
	//EEPROM_write(0x0051,(0>>8)&0xff);
//
	//NOP();
	
	fatigue_number =EEPROM_read(0x51);					//当前疲劳次数
 64a:	81 e5       	ldi	r24, 0x51	; 81
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	f4 df       	rcall	.-24     	; 0x638 <EEPROM_read>
 650:	c8 2f       	mov	r28, r24
 652:	d0 e0       	ldi	r29, 0x00	; 0
 654:	d0 93 47 01 	sts	0x0147, r29	; 0x800147 <fatigue_number+0x1>
 658:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <fatigue_number>
	fatigue_number =(fatigue_number<<8)+EEPROM_read(0x50);
 65c:	80 e5       	ldi	r24, 0x50	; 80
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	eb df       	rcall	.-42     	; 0x638 <EEPROM_read>
 662:	dc 2f       	mov	r29, r28
 664:	cc 27       	eor	r28, r28
 666:	c8 0f       	add	r28, r24
 668:	d1 1d       	adc	r29, r1
	
	if(fatigue_number>=9999)fatigue_number=0;
 66a:	cf 30       	cpi	r28, 0x0F	; 15
 66c:	27 e2       	ldi	r18, 0x27	; 39
 66e:	d2 07       	cpc	r29, r18
 670:	28 f4       	brcc	.+10     	; 0x67c <state_init+0x36>
	//EEPROM_write(0x0051,(0>>8)&0xff);
//
	//NOP();
	
	fatigue_number =EEPROM_read(0x51);					//当前疲劳次数
	fatigue_number =(fatigue_number<<8)+EEPROM_read(0x50);
 672:	d0 93 47 01 	sts	0x0147, r29	; 0x800147 <fatigue_number+0x1>
 676:	c0 93 46 01 	sts	0x0146, r28	; 0x800146 <fatigue_number>
 67a:	04 c0       	rjmp	.+8      	; 0x684 <state_init+0x3e>
	
	if(fatigue_number>=9999)fatigue_number=0;
 67c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <fatigue_number+0x1>
 680:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <fatigue_number>
	
	dis_buf[dis_bit00]=fatigue_number%10;
 684:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <fatigue_number>
 688:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <fatigue_number+0x1>
 68c:	e8 e2       	ldi	r30, 0x28	; 40
 68e:	f1 e0       	ldi	r31, 0x01	; 1
 690:	9a 01       	movw	r18, r20
 692:	ad ec       	ldi	r26, 0xCD	; 205
 694:	bc ec       	ldi	r27, 0xCC	; 204
 696:	08 d1       	rcall	.+528    	; 0x8a8 <__umulhisi3>
 698:	ec 01       	movw	r28, r24
 69a:	d6 95       	lsr	r29
 69c:	c7 95       	ror	r28
 69e:	d6 95       	lsr	r29
 6a0:	c7 95       	ror	r28
 6a2:	d6 95       	lsr	r29
 6a4:	c7 95       	ror	r28
 6a6:	9e 01       	movw	r18, r28
 6a8:	22 0f       	add	r18, r18
 6aa:	33 1f       	adc	r19, r19
 6ac:	ce 01       	movw	r24, r28
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	82 0f       	add	r24, r18
 6bc:	93 1f       	adc	r25, r19
 6be:	9a 01       	movw	r18, r20
 6c0:	28 1b       	sub	r18, r24
 6c2:	39 0b       	sbc	r19, r25
 6c4:	20 83       	st	Z, r18
	dis_buf[dis_bit01]=(fatigue_number/10)%10;
 6c6:	9e 01       	movw	r18, r28
 6c8:	ef d0       	rcall	.+478    	; 0x8a8 <__umulhisi3>
 6ca:	96 95       	lsr	r25
 6cc:	87 95       	ror	r24
 6ce:	96 95       	lsr	r25
 6d0:	87 95       	ror	r24
 6d2:	96 95       	lsr	r25
 6d4:	87 95       	ror	r24
 6d6:	9c 01       	movw	r18, r24
 6d8:	22 0f       	add	r18, r18
 6da:	33 1f       	adc	r19, r19
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	82 0f       	add	r24, r18
 6ea:	93 1f       	adc	r25, r19
 6ec:	c8 1b       	sub	r28, r24
 6ee:	d9 0b       	sbc	r29, r25
 6f0:	c1 83       	std	Z+1, r28	; 0x01
	dis_buf[dis_bit02]=(fatigue_number/100)%10;
 6f2:	9a 01       	movw	r18, r20
 6f4:	36 95       	lsr	r19
 6f6:	27 95       	ror	r18
 6f8:	36 95       	lsr	r19
 6fa:	27 95       	ror	r18
 6fc:	ab e7       	ldi	r26, 0x7B	; 123
 6fe:	b4 e1       	ldi	r27, 0x14	; 20
 700:	d3 d0       	rcall	.+422    	; 0x8a8 <__umulhisi3>
 702:	ec 01       	movw	r28, r24
 704:	d6 95       	lsr	r29
 706:	c7 95       	ror	r28
 708:	9e 01       	movw	r18, r28
 70a:	ad ec       	ldi	r26, 0xCD	; 205
 70c:	bc ec       	ldi	r27, 0xCC	; 204
 70e:	cc d0       	rcall	.+408    	; 0x8a8 <__umulhisi3>
 710:	bc 01       	movw	r22, r24
 712:	76 95       	lsr	r23
 714:	67 95       	ror	r22
 716:	76 95       	lsr	r23
 718:	67 95       	ror	r22
 71a:	76 95       	lsr	r23
 71c:	67 95       	ror	r22
 71e:	cb 01       	movw	r24, r22
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	66 0f       	add	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	66 0f       	add	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	66 0f       	add	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	68 0f       	add	r22, r24
 732:	79 1f       	adc	r23, r25
 734:	c6 1b       	sub	r28, r22
 736:	d7 0b       	sbc	r29, r23
 738:	c2 83       	std	Z+2, r28	; 0x02
	dis_buf[dis_bit03]=(fatigue_number/1000)%10;
 73a:	9a 01       	movw	r18, r20
 73c:	36 95       	lsr	r19
 73e:	27 95       	ror	r18
 740:	36 95       	lsr	r19
 742:	27 95       	ror	r18
 744:	36 95       	lsr	r19
 746:	27 95       	ror	r18
 748:	a5 ec       	ldi	r26, 0xC5	; 197
 74a:	b0 e2       	ldi	r27, 0x20	; 32
 74c:	ad d0       	rcall	.+346    	; 0x8a8 <__umulhisi3>
 74e:	ec 01       	movw	r28, r24
 750:	d2 95       	swap	r29
 752:	c2 95       	swap	r28
 754:	cf 70       	andi	r28, 0x0F	; 15
 756:	cd 27       	eor	r28, r29
 758:	df 70       	andi	r29, 0x0F	; 15
 75a:	cd 27       	eor	r28, r29
 75c:	9e 01       	movw	r18, r28
 75e:	ad ec       	ldi	r26, 0xCD	; 205
 760:	bc ec       	ldi	r27, 0xCC	; 204
 762:	a2 d0       	rcall	.+324    	; 0x8a8 <__umulhisi3>
 764:	ac 01       	movw	r20, r24
 766:	56 95       	lsr	r21
 768:	47 95       	ror	r20
 76a:	56 95       	lsr	r21
 76c:	47 95       	ror	r20
 76e:	56 95       	lsr	r21
 770:	47 95       	ror	r20
 772:	ca 01       	movw	r24, r20
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	44 0f       	add	r20, r20
 77a:	55 1f       	adc	r21, r21
 77c:	44 0f       	add	r20, r20
 77e:	55 1f       	adc	r21, r21
 780:	44 0f       	add	r20, r20
 782:	55 1f       	adc	r21, r21
 784:	48 0f       	add	r20, r24
 786:	59 1f       	adc	r21, r25
 788:	c4 1b       	sub	r28, r20
 78a:	d5 0b       	sbc	r29, r21
 78c:	c3 83       	std	Z+3, r28	; 0x03
	
	display_some(0,4);
 78e:	64 e0       	ldi	r22, 0x04	; 4
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	f2 dc       	rcall	.-1564   	; 0x178 <display_some>

}
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	08 95       	ret

0000079a <timer1_init>:
	return EEDR;/* 自数据寄存器返回数据 */
}

void timer1_init(void)
{
	TCNT1  = 0x3CAF; //setup
 79a:	8f ea       	ldi	r24, 0xAF	; 175
 79c:	9c e3       	ldi	r25, 0x3C	; 60
 79e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
 7a2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TCCR1A = 0x00;
 7a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
	TCCR1B = 0x01;//熔断丝8分频，计数器不分频，溢出时间为5.22mS           0x05; // 预分频 ck/1024 ,计数允许
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
	TCCR1C = 0x00;
 7b0:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>
	TIMSK1 = 0x01;
 7b4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
 7b8:	08 95       	ret

000007ba <main>:
int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	//unsigned int  fatigue_number =0;
	
	board_init();
 7ba:	21 dd       	rcall	.-1470   	; 0x1fe <board_init>
	ioport_init();
	
	cli();
 7bc:	f8 94       	cli
	Delayms(100);
 7be:	84 e6       	ldi	r24, 0x64	; 100
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	54 dc       	rcall	.-1880   	; 0x6c <Delayms>
	port_init();
 7c4:	e3 de       	rcall	.-570    	; 0x58c <port_init>
	key_init();
 7c6:	1c dd       	rcall	.-1480   	; 0x200 <key_init>
	dis_f_test();//数码管全显示
 7c8:	c5 dc       	rcall	.-1654   	; 0x154 <dis_f_test>
	state_init();
 7ca:	3d df       	rcall	.-390    	; 0x646 <state_init>
	DIS_PARA(7,dis_delay_off);	//电磁阀1,2指示灯灭
 7cc:	64 e1       	ldi	r22, 0x14	; 20
 7ce:	87 e0       	ldi	r24, 0x07	; 7
 7d0:	97 dc       	rcall	.-1746   	; 0x100 <DIS_PARA>
	
	CLEARBIT(EIFR,INTF0);//清外部中断0标记
 7d2:	e0 98       	cbi	0x1c, 0	; 28
	sei();//开中断
 7d4:	78 94       	sei
	workingstate=workingstate_stop;
 7d6:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <workingstate>
	dis_f_test();//数码管全显示	
 7da:	bc dc       	rcall	.-1672   	; 0x154 <dis_f_test>
	Delayms(500);
 7dc:	84 ef       	ldi	r24, 0xF4	; 244
 7de:	91 e0       	ldi	r25, 0x01	; 1
 7e0:	45 dc       	rcall	.-1910   	; 0x6c <Delayms>
	
	timer1_init();
 7e2:	db df       	rcall	.-74     	; 0x79a <timer1_init>
		//{
		//	display_some(0,4);
		//}
		
		
		Key_detect();
 7e4:	9e dd       	rcall	.-1220   	; 0x322 <Key_detect>
		if(null!=KeyValue)
 7e6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <KeyValue>
 7ea:	88 23       	and	r24, r24
 7ec:	d9 f3       	breq	.-10     	; 0x7e4 <main+0x2a>
		{
			Key_ISR();//按键处理
 7ee:	ac de       	rcall	.-680    	; 0x548 <Key_ISR>
 7f0:	f9 cf       	rjmp	.-14     	; 0x7e4 <main+0x2a>

000007f2 <timer1_close>:
	//sei();
}

void timer1_close(void)
{
	TCNT1  = 0x3CAF; //setup
 7f2:	8f ea       	ldi	r24, 0xAF	; 175
 7f4:	9c e3       	ldi	r25, 0x3C	; 60
 7f6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
 7fa:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	TCCR1A = 0x00;
 7fe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
	TCCR1B = 0x00; // 预分频 ck/1024 ,计数禁止
 802:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
	TCCR1C = 0x00;
 806:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>
	TIMSK1 = 0x00;
 80a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
 80e:	08 95       	ret

00000810 <__vector_13>:
}

//ISR(TIMER1_OVF_vect)
ISR(TIMER1_OVF_vect)
{
 810:	1f 92       	push	r1
 812:	0f 92       	push	r0
 814:	0f b6       	in	r0, 0x3f	; 63
 816:	0f 92       	push	r0
 818:	11 24       	eor	r1, r1
 81a:	2f 93       	push	r18
 81c:	3f 93       	push	r19
 81e:	4f 93       	push	r20
 820:	5f 93       	push	r21
 822:	6f 93       	push	r22
 824:	7f 93       	push	r23
 826:	8f 93       	push	r24
 828:	9f 93       	push	r25
 82a:	af 93       	push	r26
 82c:	bf 93       	push	r27
 82e:	ef 93       	push	r30
 830:	ff 93       	push	r31
	if (timeover_buf>=20)
 832:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <timeover_buf>
 836:	84 31       	cpi	r24, 0x14	; 20
 838:	e0 f0       	brcs	.+56     	; 0x872 <__vector_13+0x62>
	{
		
		timeover_buf=0;
 83a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <timeover_buf>
		if (timeover_flag)
 83e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timeover_flag>
 842:	88 23       	and	r24, r24
 844:	79 f0       	breq	.+30     	; 0x864 <__vector_13+0x54>
		{
			timeover_flag=false;
 846:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <timeover_flag>
			DIS_PARA(0,dis_null);
 84a:	60 e1       	ldi	r22, 0x10	; 16
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	58 dc       	rcall	.-1872   	; 0x100 <DIS_PARA>
			DIS_PARA(1,dis_null);
 850:	60 e1       	ldi	r22, 0x10	; 16
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	55 dc       	rcall	.-1878   	; 0x100 <DIS_PARA>
			DIS_PARA(2,dis_null);
 856:	60 e1       	ldi	r22, 0x10	; 16
 858:	82 e0       	ldi	r24, 0x02	; 2
 85a:	52 dc       	rcall	.-1884   	; 0x100 <DIS_PARA>
			DIS_PARA(3,dis_null);
 85c:	60 e1       	ldi	r22, 0x10	; 16
 85e:	83 e0       	ldi	r24, 0x03	; 3
 860:	4f dc       	rcall	.-1890   	; 0x100 <DIS_PARA>
 862:	0a c0       	rjmp	.+20     	; 0x878 <__vector_13+0x68>
		} 
		else
		{
			timeover_flag=true;
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timeover_flag>
			display_some(0,4);
 86a:	64 e0       	ldi	r22, 0x04	; 4
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	84 dc       	rcall	.-1784   	; 0x178 <display_some>
 870:	03 c0       	rjmp	.+6      	; 0x878 <__vector_13+0x68>
		
		
	} 
	else
	{
		timeover_buf++;
 872:	8f 5f       	subi	r24, 0xFF	; 255
 874:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <timeover_buf>
	}
	
	
	CLEARBIT(TIFR1,TOV1);
 878:	b0 98       	cbi	0x16, 0	; 22
	TCNT1  = 0x3CAF; //setup
 87a:	8f ea       	ldi	r24, 0xAF	; 175
 87c:	9c e3       	ldi	r25, 0x3C	; 60
 87e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
 882:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
 886:	ff 91       	pop	r31
 888:	ef 91       	pop	r30
 88a:	bf 91       	pop	r27
 88c:	af 91       	pop	r26
 88e:	9f 91       	pop	r25
 890:	8f 91       	pop	r24
 892:	7f 91       	pop	r23
 894:	6f 91       	pop	r22
 896:	5f 91       	pop	r21
 898:	4f 91       	pop	r20
 89a:	3f 91       	pop	r19
 89c:	2f 91       	pop	r18
 89e:	0f 90       	pop	r0
 8a0:	0f be       	out	0x3f, r0	; 63
 8a2:	0f 90       	pop	r0
 8a4:	1f 90       	pop	r1
 8a6:	18 95       	reti

000008a8 <__umulhisi3>:
 8a8:	a2 9f       	mul	r26, r18
 8aa:	b0 01       	movw	r22, r0
 8ac:	b3 9f       	mul	r27, r19
 8ae:	c0 01       	movw	r24, r0
 8b0:	a3 9f       	mul	r26, r19
 8b2:	01 d0       	rcall	.+2      	; 0x8b6 <__umulhisi3+0xe>
 8b4:	b2 9f       	mul	r27, r18
 8b6:	70 0d       	add	r23, r0
 8b8:	81 1d       	adc	r24, r1
 8ba:	11 24       	eor	r1, r1
 8bc:	91 1d       	adc	r25, r1
 8be:	08 95       	ret

000008c0 <_exit>:
 8c0:	f8 94       	cli

000008c2 <__stop_program>:
 8c2:	ff cf       	rjmp	.-2      	; 0x8c2 <__stop_program>
